# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
play.crypto.secret="]sg5hTIzfl>pwCUJA4rY4>FDvUDzsh7qD3:`RyIoRd^]M41sD`/@o@md3dKCg14>"

# The application languages
# ~~~~~
play.i18n.langs = ["en"]


# Registers the filters
# ~~~~~
play.http.filters = "utils.Filters"

# The application DI modules
# ~~~~~
play.modules.enabled += "modules.SilhouetteModule"
play.modules.enabled += "modules.AppModule"

play.modules.disabled += "com.mohiva.play.silhouette.api.actions.SecuredErrorHandlerModule"
play.modules.disabled += "com.mohiva.play.silhouette.api.actions.UnsecuredErrorHandlerModule"


# Security Filter Configuration - Content Security Policy
play.filters.headers {
  contentSecurityPolicy = "default-src 'self';"
  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" img-src 'self' data: fbcdn-profile-a.akamaihd.net *.twimg.com *.googleusercontent.com *.xingassets.com vk.com *.yimg.com secure.gravatar.com *;"
  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" style-src 'self' 'unsafe-inline' www.w3schools.com cdnjs.cloudflare.com maxcdn.bootstrapcdn.com cdn.jsdelivr.net fonts.googleapis.com;"
  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" font-src 'self' fonts.gstatic.com fonts.googleapis.com cdnjs.cloudflare.com cdn.jsdelivr.net;"
  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" script-src 'self' 'unsafe-inline' cdn.jsdelivr.net cdnjs.cloudflare.com www.google-analytics.com;"
  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" connect-src 'self' twitter.com *.xing.com *;"
  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" frame-src clef.io"
}

play.filters.csrf {
  header {
    bypassHeaders {
      X-Requested-With = "*"
      Csrf-Token = "nocheck"
    }
    protectHeaders = null
  }
  bypassCorsTrustedOrigins = false
  method {
    whiteList = []
    blackList = ["POST"]
  }
  contentType.blackList = ["application/x-www-form-urlencoded", "text/plain"]
}


neo4j.server="http://localhost"
neo4j.port="7474"
neo4j.endpoint="/db/data/"
neo4j.username="neo4j"
neo4j.password="aj"



# Amazon AWS Credentials - http://aws.amazon.com/security-credentials
aws.accessKey = "AKIAZJ2OER5253ICHN3M"
aws.secretKey = "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"
aws.s3.bucket = "postboard.online.images3"

myUploadPath = "/tmp/"


include "silhouette.conf"
